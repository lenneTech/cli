import { Field, ObjectType } from '@nestjs/graphql';
import { PersistenceModel } from '../../common/models/persistence.model';
import { Restricted, RoleEnum } from '@lenne.tech/nest-server';
import { Prop, Schema as MongooseSchema, SchemaFactory } from '@nestjs/mongoose';
import { Schema, Document } from 'mongoose';
import { User } from '../user/user.model';

export type <%= props.namePascal %>Document = <%= props.namePascal %> & Document;

/**
 * <%= props.namePascal %> model
 */
@ObjectType({ description: '<%= props.namePascal %>' })
@MongooseSchema({ timestamps: true })
export class <%= props.namePascal %> extends PersistenceModel {

  // ===================================================================================================================
  // Properties
  // ===================================================================================================================

  /**
   * Description of the property
   */
  @Restricted(RoleEnum.ADMIN, RoleEnum.OWNER)
  @Field( () => [String], { description: 'Properties of <%= props.namePascal %>', nullable: 'items'})
  @Prop([String])
  properties: string[] = undefined;

  @Field(() => User, {
    description: 'User who has tested the <%= props.namePascal %>',
    nullable: true,
  })
  @Prop({ type: Schema.Types.ObjectId, ref: 'User' })
  testedBy: User = undefined;

  // ===================================================================================================================
  // Methods
  // ===================================================================================================================

  /**
   * Initialize instance with default values instead of undefined
   */
  init() {
    super.init();
    this.properties = [];
    return this;
  }
}

export const <%= props.namePascal %>Schema = SchemaFactory.createForClass(<%= props.namePascal %>);
