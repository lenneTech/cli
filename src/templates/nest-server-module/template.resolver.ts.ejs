import { check, FilterArgs, GraphQLUser, RoleEnum, Roles } from '@lenne.tech/nest-server';
import { Inject } from '@nestjs/common';
import { Args, Info, Mutation, Query, Resolver, Subscription } from '@nestjs/graphql';
import { GraphQLResolveInfo } from 'graphql';
import { PubSub } from 'graphql-subscriptions';
import { User } from '../user/user.model';
import { <%= props.namePascal %>CreateInput } from './inputs/<%= props.nameKebab %>-create.input';
import { <%= props.namePascal %>Input } from './inputs/<%= props.nameKebab %>.input';
import { <%= props.namePascal %> } from './<%= props.nameKebab %>.model';
import { <%= props.namePascal %>Service } from './<%= props.nameKebab %>.service';

/**
 * Resolver to process with <%= props.namePascal %> data
 */
@Resolver(of => <%= props.namePascal %>)
export class <%= props.namePascal %>Resolver {

  /**
   * Import services
   */
  constructor(
    private readonly <%= props.nameCamel %>Service: <%= props.namePascal %>Service,
    @Inject('PUB_SUB') protected readonly pubSub: PubSub
  ) {}

  // ===========================================================================
  // Queries
  // ===========================================================================

  /**
   * Get <%= props.namePascal %>s (via filter)
   */
   @Roles(RoleEnum.USER)
   @Query(returns => [<%= props.namePascal %>], { description: 'Find <%= props.namePascal %> (via filter)' })
   async find<%= props.namePascal %>s(@Info() info: GraphQLResolveInfo, @Args() args?: FilterArgs) {
     return await this.<%= props.nameCamel %>Service.find(args, { fieldSelection: { info, select: 'find<%= props.namePascal %>s' } });
   }

  /**
   * Get <%= props.namePascal %> via ID
   */
  @Query(returns => <%= props.namePascal %>, { description: 'Get <%= props.namePascal %> with specified ID' })
  async get<%= props.namePascal %>(@Args('id') id: string, @Info() info: GraphQLResolveInfo): Promise<<%= props.namePascal %>> {
    return await this.<%= props.nameCamel %>Service.get(id, { fieldSelection: { info, select: 'get<%= props.namePascal %>' } });
  }

  // ===========================================================================
  // Mutations
  // ===========================================================================

  /**
   * Create new <%= props.namePascal %>
   */
  @Mutation(returns => <%= props.namePascal %>, { description: 'Create a new <%= props.namePascal %>' })
  async create<%= props.namePascal %>(@Args('input') input: <%= props.namePascal %>CreateInput, @GraphQLUser() user: User, @Info() info: GraphQLResolveInfo): Promise<<%= props.namePascal %>> {
    return await this.<%= props.nameCamel %>Service.create(input, { currentUser: user, fieldSelection: { info, select: 'create<%= props.namePascal %>' } });
  }

  /**
   * Delete existing <%= props.namePascal %>
   */
  @Roles(RoleEnum.ADMIN, RoleEnum.OWNER)
  @Mutation(returns => <%= props.namePascal %>, { description: 'Delete existing <%= props.namePascal %>' })
  async delete<%= props.namePascal %>(@Args('id') id: string, @Info() info: GraphQLResolveInfo): Promise<<%= props.namePascal %>> {
    return await this.<%= props.nameCamel %>Service.delete(id, { fieldSelection: { info, select: 'delete<%= props.namePascal %>' } });
  }

  /**
   * Update existing <%= props.namePascal %>
   */
  @Roles(RoleEnum.ADMIN, RoleEnum.OWNER)
  @Mutation(returns => <%= props.namePascal %>, { description: 'Update existing <%= props.namePascal %>' })
  async update<%= props.namePascal %>(
    @Args('input') input: <%= props.namePascal %>Input,
    @Args('id') id: string,
    @GraphQLUser() user: User,
    @Info() info: GraphQLResolveInfo
  ): Promise<<%= props.namePascal %>> {

    // Check input
    // Hint: necessary as long as global CheckInputPipe can't access context for current user
    // (see https://github.com/nestjs/graphql/issues/325)
    input = await check(input, user);

    // Update <%= props.namePascal %>
    return await this.<%= props.nameCamel %>Service.update(id, input, {
      currentUser: user,
      fieldSelection: { info, select: 'update<%= props.namePascal %>' },
    });
  }

  // ===========================================================================
  // Subscriptions
  // ===========================================================================

  /**
   * Subscription for create <%= props.namePascal %>
   */
  @Subscription(returns => <%= props.namePascal %>, {
    filter(this: <%= props.namePascal %>Resolver, payload, variables, context) {
      return context.user.roles.include(RoleEnum.ADMIN);
    },
    resolve: (value) => value,
  })
  async <%= props.nameCamel %>Created() {
    return this.pubSub.asyncIterator('<%= props.nameCamel %>Created');
  }
}
